// Whitespace
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
WHITESPACE = _{ " " }

// Program
program = { SOI ~ ((instruction) ~ (NEWLINE)*)+ ~ EOI }

// Instruction
instruction = {
    no_operand_instruction
  | one_reg_operand_instruction
  | one_any_operand_instruction
  | two_reg_any_operand_instruction
  | two_any_reg_operand_instruction
  | two_reg_reg_operand_instruction
  | two_any_any_operand_instruction
  | three_reg_any_any_operand_instruction
  | three_any_reg_any_operand_instruction
  | three_reg_reg_any_operand_instruction
  | three_any_any_reg_operand_instruction
  | three_reg_any_reg_operand_instruction
}

// No operands
no_operand_instruction = {
    ("SCR" | "RECV" | "TXBS" | "RXBS" | "NOP" | "WRX" | "HLT" | "TRS" )
}

// One operand (register only)
one_reg_operand_instruction = { one_reg_instructions ~ register }

one_reg_instructions = { "POP" | "RSP" | "NOT" | "INC" | "DEC" | "DPRW" }

// One operand (any value)
one_any_operand_instruction = {
    one_any_operand_instructions ~ any_value
}

one_any_operand_instructions = { "PUSH" | "DPWW" | "JMP" | "JPR" | "JSR" | "SLP" }

// Two operands (register, any value)
two_reg_any_operand_instruction = {
    two_reg_any_operand_instructions ~ register ~ "," ~ any_value
}

two_reg_any_operand_instructions = { "PEEK" | "XMIT" | "LDR" | "DPR" | "APR" }

// Two operands (any value, register)
two_any_reg_operand_instruction = {
    two_any_reg_operand_instructions ~ any_value ~ "," ~ register
}

two_any_reg_operand_instructions = {
    "BEZ"
  | "BNZ"
  | "BREZ"
  | "BRNZ"
}

// Two operands (register, register)
two_reg_reg_operand_instruction = {
    two_reg_reg_operand_instructions ~ register ~ "," ~ register
}

two_reg_reg_operand_instructions = {
   "ADD"
  | "SUB"
  | "MUL"
  | "DIV"
  | "MOD"
  | "AND"
  | "OR"
  | "XOR"
  | "RCY"
  | "RMV" }

// Two operands (any value, any value)
two_any_any_operand_instruction = {
    two_any_any_operand_instructions ~ any_value ~ "," ~ any_value
}

two_any_any_operand_instructions = {
    "STM" | "DPW" | "APW"
}

// Three operands (register, register, any value)
three_reg_any_any_operand_instruction = {
    three_reg_any_any_operand_instructions ~ register ~ "," ~ register ~ "," ~ any_value
}

three_reg_any_any_operand_instructions = {
   "XXX"
}

// Three operands (any value, register , any value)
three_any_reg_any_operand_instruction = {
    three_any_reg_any_operand_instructions ~ any_value ~ "," ~ register ~ "," ~ any_value
}

three_any_reg_any_operand_instructions = {
    "BEQ"
  | "BNE"
  | "BGE"
  | "BLE"
  | "BGT"
  | "BLT"
  | "BREQ"
  | "BRNE"
  | "BRGE"
  | "BRLE"
  | "BRGT"
  | "BRLT"
}

// Three operands (any value, register , any value)
three_reg_reg_any_operand_instruction = {
    three_reg_reg_any_operand_instructions ~ register ~ "," ~ register ~ "," ~ any_value
}

three_reg_reg_any_operand_instructions = {
    "SLL"
    | "SLC"
    | "SLR"
    | "SRC"
    | "ROL"
    | "ROR"
}

// Three operands (value, value, register)
three_any_any_reg_operand_instruction = {
    three_any_any_reg_operand_instructions ~ any_value ~ "," ~ any_value ~ "," ~ register
}

three_any_any_reg_operand_instructions = {
    "STMO"
  | "SMOI"
}

// Three operands (register, value, register)
three_reg_any_reg_operand_instruction = {
    three_reg_any_reg_operand_instructions ~ any_value ~ "," ~ any_value ~ "," ~ register
}

three_reg_any_reg_operand_instructions = {
    "LDO"
  | "LDOI"
}


// Any value can be a register or a number
any_value = _{ register | number }

// Register
register = { "A" | "X" | "Y" | "R0" | "R1" | "R2" | "R3" | "R4" | "R5" | "R6" }

// Numbers
number         = _{ hex_number | binary_number | decimal_number }
hex_number     =  { "0x" ~ ASCII_HEX_DIGIT+ }
binary_number  =  { "0b" ~ ASCII_BIN_DIGIT+ }
decimal_number =  { ASCII_DIGIT+ }
